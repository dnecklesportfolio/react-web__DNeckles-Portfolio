'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (_ref) {
  var t = _ref.types;

  return {
    visitor: {
      TaggedTemplateExpression: {
        enter: function enter(path) {
          var tag = path.node.tag;
          if (tag.object && tag.object.name == 'styled' || tag.callee && tag.callee.name == 'styled') {
            var _ret = function () {
              if (path.node._styledComponentsSeen) {
                return {
                  v: void 0
                };
              }
              var id = undefined;
              path.find(function (path) {
                if (path.isAssignmentExpression()) {
                  id = path.node.left;
                } else if (path.isObjectProperty()) {
                  id = path.node.key;
                } else if (path.isVariableDeclarator()) {
                  id = path.node.id;
                } else if (path.isStatement()) {
                  // we've hit a statement, we should stop crawling up
                  return true;
                }

                // we've got an id! no need to continue
                if (id) return true;
              });

              // ensure that we have an identifier we can inherit from
              if (!id) return {
                  v: void 0
                };

              // foo.bar -> bar
              if (t.isMemberExpression(id)) {
                id = id.property;
              }

              // identifiers are the only thing we can reliably get a name from
              if (t.isIdentifier(id)) {
                var wrapper = buildWrapper({ VALUE: path.node, NAME: t.stringLiteral(id.name) });
                path.node._styledComponentsSeen = true;
                path.replaceWith(wrapper);
              }
            }();

            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
          }
        }
      }
    }
  };
};

var _babelTemplate = require('babel-template');

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildWrapper = (0, _babelTemplate2.default)('(function() { var c = VALUE;  c.displayName = NAME; return c })()');